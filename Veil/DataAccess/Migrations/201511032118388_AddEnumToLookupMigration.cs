using Veil.DataModels.Models;

namespace Veil.DataAccess.Migrations
{
    using System.Data.Entity.Migrations;
    
    public partial class AddEnumToLookupMigration : DbMigration
    {
        // ReSharper disable InconsistentNaming
        private const string AvailabilityStatus_Lookup = "AvailabilityStatus_Lookup";
        private const string WishListVisibility_Lookup = "WishListVisibility_Lookup";
        private const string FriendshipRequestStatus_Lookup = "FriendshipRequestStatus_Lookup";
        private const string OrderStatus_Lookup = "OrderStatus_Lookup";
        private const string ReviewStatus_Lookup = "ReviewStatus_Lookup";

        private const string FK_Product_ProductAvailabilityStatus = "FK_Product_ProductAvailabilityStatus";
        private const string FK_Member_WishListVisibility = "FK_Member_WishListVisibility";
        private const string FK_Friendship_RequestStatus = "FK_Friendship_RequestStatus";
        private const string FK_WebOrder_OrderStatus = "FK_WebOrder_OrderStatus";
        private const string FK_GameReview_ReviewStatus = "FK_GameReview_ReviewStatus";
        // ReSharper restore InconsistentNaming

        public override void Up()
        {
            Sql($@"--sql generated by https://github.com/timabell/ef-enum-to-lookup

            set nocount on;
            set xact_abort on;
            --rollback on error

            begin tran;
            IF OBJECT_ID('{AvailabilityStatus_Lookup}', 'U') IS NULL
                begin
                    CREATE TABLE[{AvailabilityStatus_Lookup}](Id int CONSTRAINT PK_{AvailabilityStatus_Lookup} PRIMARY KEY, Name nvarchar(64));
                    exec sys.sp_addextendedproperty @name = N'MS_Description', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE',
                        @level1name = N'{AvailabilityStatus_Lookup}', @value = N'Automatically generated. Table & contents generated by https://github.com/timabell/ef-enum-to-lookup';
                end
            IF OBJECT_ID('{FriendshipRequestStatus_Lookup}', 'U') IS NULL
                begin
                    CREATE TABLE[{FriendshipRequestStatus_Lookup}](Id int CONSTRAINT PK_{FriendshipRequestStatus_Lookup} PRIMARY KEY, Name nvarchar(64));
                    exec sys.sp_addextendedproperty @name = N'MS_Description', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE',
                        @level1name = N'{FriendshipRequestStatus_Lookup}', @value = N'Automatically generated. Table & contents generated by https://github.com/timabell/ef-enum-to-lookup';
                end
            IF OBJECT_ID('{OrderStatus_Lookup}', 'U') IS NULL
                begin
                    CREATE TABLE[{OrderStatus_Lookup}](Id int CONSTRAINT PK_{OrderStatus_Lookup} PRIMARY KEY, Name nvarchar(64));
                    exec sys.sp_addextendedproperty @name = N'MS_Description', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE',
                        @level1name = N'{OrderStatus_Lookup}', @value = N'Automatically generated. Table & contents generated by https://github.com/timabell/ef-enum-to-lookup';
                end
            IF OBJECT_ID('{ReviewStatus_Lookup}', 'U') IS NULL
                begin
                    CREATE TABLE[{ReviewStatus_Lookup}](Id int CONSTRAINT PK_{ReviewStatus_Lookup} PRIMARY KEY, Name nvarchar(64));
                    exec sys.sp_addextendedproperty @name = N'MS_Description', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE',
                        @level1name = N'{ReviewStatus_Lookup}', @value = N'Automatically generated. Table & contents generated by https://github.com/timabell/ef-enum-to-lookup';
                end
            IF OBJECT_ID('{WishListVisibility_Lookup}', 'U') IS NULL
                begin
                    CREATE TABLE[{WishListVisibility_Lookup}](Id int CONSTRAINT PK_{WishListVisibility_Lookup} PRIMARY KEY, Name nvarchar(64));
                    exec sys.sp_addextendedproperty @name = N'MS_Description', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE',
                        @level1name = N'{WishListVisibility_Lookup}', @value = N'Automatically generated. Table & contents generated by https://github.com/timabell/ef-enum-to-lookup';
                end

            CREATE TABLE #lookups (Id int, Name nvarchar(64) COLLATE database_default);

            INSERT INTO #lookups (Id, Name) VALUES ({(int)AvailabilityStatus.PreOrder}, N'Pre Order');
            INSERT INTO #lookups (Id, Name) VALUES ({(int)AvailabilityStatus.Available}, N'Available');
            INSERT INTO #lookups (Id, Name) VALUES ({(int)AvailabilityStatus.DiscontinuedByManufacturer}, N'Discontinued By Manufacturer');
            INSERT INTO #lookups (Id, Name) VALUES ({(int)AvailabilityStatus.NotForSale}, N'Not For Sale');

            MERGE INTO[{AvailabilityStatus_Lookup}] dst
               USING #lookups src ON src.Id = dst.Id
	            WHEN MATCHED AND src.Name<> dst.Name THEN
                    UPDATE SET Name = src.Name
                WHEN NOT MATCHED THEN
                    INSERT(Id, Name)
                    VALUES(src.Id, src.Name)
                WHEN NOT MATCHED BY SOURCE THEN
                    DELETE
            ;

            TRUNCATE TABLE #lookups;

            INSERT INTO #lookups (Id, Name) VALUES ({(int)FriendshipRequestStatus.Pending}, N'{FriendshipRequestStatus.Pending}');
            INSERT INTO #lookups (Id, Name) VALUES ({(int)FriendshipRequestStatus.Accepted}, N'{FriendshipRequestStatus.Accepted}');

            MERGE INTO[{FriendshipRequestStatus_Lookup}] dst
               USING #lookups src ON src.Id = dst.Id
	            WHEN MATCHED AND src.Name<> dst.Name THEN
                    UPDATE SET Name = src.Name
                WHEN NOT MATCHED THEN
                    INSERT(Id, Name)
                    VALUES(src.Id, src.Name)
                WHEN NOT MATCHED BY SOURCE THEN
                    DELETE
            ;

            TRUNCATE TABLE #lookups;

            INSERT INTO #lookups (Id, Name) VALUES ({(int)OrderStatus.PendingProcessing}, N'Pending Processing');
            INSERT INTO #lookups (Id, Name) VALUES ({(int)OrderStatus.BeingProcessed}, N'Being Processed');
            INSERT INTO #lookups (Id, Name) VALUES ({(int)OrderStatus.Processed}, N'Processed');
            INSERT INTO #lookups (Id, Name) VALUES ({(int)OrderStatus.UserCancelled}, N'User Cancelled');
            INSERT INTO #lookups (Id, Name) VALUES ({(int)OrderStatus.EmployeeCancelled}, N'Employee Cancelled');

            MERGE INTO[{OrderStatus_Lookup}] dst
               USING #lookups src ON src.Id = dst.Id
	            WHEN MATCHED AND src.Name<> dst.Name THEN
                    UPDATE SET Name = src.Name
                WHEN NOT MATCHED THEN
                    INSERT(Id, Name)
                    VALUES(src.Id, src.Name)
                WHEN NOT MATCHED BY SOURCE THEN
                    DELETE
            ;

            TRUNCATE TABLE #lookups;

            INSERT INTO #lookups (Id, Name) VALUES ({(int)ReviewStatus.Pending}, N'{ReviewStatus.Pending}');
            INSERT INTO #lookups (Id, Name) VALUES ({(int)ReviewStatus.Approved}, N'{ReviewStatus.Approved}');
            INSERT INTO #lookups (Id, Name) VALUES ({(int)ReviewStatus.Denied}, N'{ReviewStatus.Denied}');

            MERGE INTO[{ReviewStatus_Lookup}] dst
               USING #lookups src ON src.Id = dst.Id
	            WHEN MATCHED AND src.Name<> dst.Name THEN
                    UPDATE SET Name = src.Name
                WHEN NOT MATCHED THEN
                    INSERT(Id, Name)
                    VALUES(src.Id, src.Name)
                WHEN NOT MATCHED BY SOURCE THEN
                    DELETE
            ;

            TRUNCATE TABLE #lookups;

            INSERT INTO #lookups (Id, Name) VALUES ({(int)WishListVisibility.Public} , N'Public');
            INSERT INTO #lookups (Id, Name) VALUES ({(int)WishListVisibility.FriendsOnly}, N'Friends Only');
            INSERT INTO #lookups (Id, Name) VALUES ({(int)WishListVisibility.Private}, N'Private');

            MERGE INTO[{WishListVisibility_Lookup}] dst
               USING #lookups src ON src.Id = dst.Id
	            WHEN MATCHED AND src.Name<> dst.Name THEN
                    UPDATE SET Name = src.Name
                WHEN NOT MATCHED THEN
                    INSERT(Id, Name)
                    VALUES(src.Id, src.Name)
                WHEN NOT MATCHED BY SOURCE THEN
                    DELETE
            ;

            TRUNCATE TABLE #lookups;

            DROP TABLE #lookups;

            IF OBJECT_ID('{FK_Product_ProductAvailabilityStatus}', 'F') IS NULL ALTER TABLE[Product] ADD CONSTRAINT {FK_Product_ProductAvailabilityStatus} FOREIGN KEY([ProductAvailabilityStatus]) REFERENCES[{AvailabilityStatus_Lookup}](Id);
            IF OBJECT_ID('{FK_Member_WishListVisibility}', 'F') IS NULL ALTER TABLE[Member] ADD CONSTRAINT {FK_Member_WishListVisibility} FOREIGN KEY([WishListVisibility]) REFERENCES[{WishListVisibility_Lookup}](Id);
            IF OBJECT_ID('{FK_Friendship_RequestStatus}', 'F') IS NULL ALTER TABLE[Friendship] ADD CONSTRAINT {FK_Friendship_RequestStatus} FOREIGN KEY([RequestStatus]) REFERENCES[{FriendshipRequestStatus_Lookup}](Id);
            IF OBJECT_ID('{FK_WebOrder_OrderStatus}', 'F') IS NULL ALTER TABLE[WebOrder] ADD CONSTRAINT {FK_WebOrder_OrderStatus} FOREIGN KEY([OrderStatus]) REFERENCES[{OrderStatus_Lookup}](Id);
            IF OBJECT_ID('{FK_GameReview_ReviewStatus}', 'F') IS NULL ALTER TABLE[GameReview] ADD CONSTRAINT {FK_GameReview_ReviewStatus} FOREIGN KEY([ReviewStatus]) REFERENCES[{ ReviewStatus_Lookup}](Id);

            commit;",
            suppressTransaction: true);
        }
        
        public override void Down()
        {
            DropForeignKey($"{VeilDataContext.SCHEMA_NAME}.{nameof(Product)}", FK_Product_ProductAvailabilityStatus);
            DropForeignKey($"{VeilDataContext.SCHEMA_NAME}.{nameof(Member)}", FK_Member_WishListVisibility);
            DropForeignKey($"{VeilDataContext.SCHEMA_NAME}.{nameof(Friendship)}", FK_Friendship_RequestStatus);
            DropForeignKey($"{VeilDataContext.SCHEMA_NAME}.{nameof(WebOrder)}", FK_WebOrder_OrderStatus);
            DropForeignKey($"{VeilDataContext.SCHEMA_NAME}.{nameof(GameReview)}", FK_GameReview_ReviewStatus);

            DropTable($"{VeilDataContext.SCHEMA_NAME}.{AvailabilityStatus_Lookup}");
            DropTable($"{VeilDataContext.SCHEMA_NAME}.{WishListVisibility_Lookup}");
            DropTable($"{VeilDataContext.SCHEMA_NAME}.{FriendshipRequestStatus_Lookup}");
            DropTable($"{VeilDataContext.SCHEMA_NAME}.{OrderStatus_Lookup}");
            DropTable($"{VeilDataContext.SCHEMA_NAME}.{ReviewStatus_Lookup}");
        }
    }
}
